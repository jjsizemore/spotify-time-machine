name: Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.18.1'

jobs:
  # Fast checks
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm run lint

      - name: Type check
        run: pnpm run type-check

  # Unit and integration tests with sharding (Vitest v4 feature)
  test-sharded:
    name: Test (Shard ${{ matrix.shardIndex }}/${{ matrix.shardTotal }})
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck]
    strategy:
      fail-fast: false # Continue running other shards even if one fails
      matrix:
        shardIndex: [1, 2, 3, 4]
        shardTotal: [4]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests (sharded)
        run: |
          # Set max threads per shard for optimal performance on GitHub Actions (4-core machines)
          # GitHub Actions runners have 4 cores: 1 main thread + 3 worker threads = 4 total
          export VITEST_MAX_THREADS=3

          # Debug: List test files that will be run
          echo "üìã Test files for shard ${{ matrix.shardIndex }}/${{ matrix.shardTotal }}:"
          pnpm vitest list --project=unit --project=integration --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }} || echo "No tests found for this shard"

          # Run the shard
          pnpm test:shard --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}
        env:
          NODE_ENV: test

      - name: Debug - List report files
        if: ${{ !cancelled() }}
        run: |
          echo "üìÅ Contents of .vitest-reports/:"
          ls -lah .vitest-reports/ || echo "Directory does not exist"

      - name: Upload shard report
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-report-shard-${{ matrix.shardIndex }}
          path: .vitest-reports/*
          include-hidden-files: true
          retention-days: 1

  # Browser tests
  test-browser:
    name: Browser Tests
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: pnpm playwright:install

      - name: Run browser tests
        run: pnpm test:browser
        env:
          NODE_ENV: test

      - name: Upload browser test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: browser-test-artifacts
          path: |
            test-results/
            tests/browser/__screenshots__/
          retention-days: 7

  # Merge test reports and generate coverage
  merge-reports:
    name: Merge Reports & Coverage
    if: ${{ !cancelled() }}
    needs: [test-sharded]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download all shard reports
        uses: actions/download-artifact@v4
        with:
          path: .vitest-reports
          pattern: test-report-shard-*
          merge-multiple: true

      - name: Debug - List downloaded reports
        run: |
          echo "üìÅ Downloaded reports:"
          find .vitest-reports -type f -ls || echo "No reports found"
          echo "üìä Total files: $(find .vitest-reports -type f | wc -l)"

      - name: Merge test reports and coverage
        run: |
          echo "üîÑ Merging reports from $(find .vitest-reports -name '*.json' | wc -l) blob files..."
          pnpm test:merge-reports --coverage.enabled=true --coverage.reporter=text --coverage.reporter=json --coverage.reporter=html --coverage.reporter=lcov --coverage.reporter=json-summary
        env:
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage/
            test-results/
          retention-days: 30

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: coverage/coverage-summary.md

  # Final status check
  test-status:
    name: Test Status
    if: ${{ !cancelled() }}
    needs: [test-sharded, test-browser, merge-reports]
    runs-on: ubuntu-latest
    steps:
      - name: Check test results
        run: |
          echo "Shard Tests: ${{ needs.test-sharded.result }}"
          echo "Browser Tests: ${{ needs.test-browser.result }}"
          echo "Merge Reports: ${{ needs.merge-reports.result }}"

          if [[ "${{ needs.test-sharded.result }}" == "success" && 
                "${{ needs.test-browser.result }}" == "success" && 
                "${{ needs.merge-reports.result }}" == "success" ]]; then
            echo "‚úÖ All tests passed!"
            exit 0
          else
            echo "‚ùå Some tests failed"
            exit 1
          fi
